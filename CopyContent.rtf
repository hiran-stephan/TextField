{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Issue Overview:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 In the current implementation, we are using SwiftUI's 
\f2\fs26 presentationDetents
\f1\fs24  to control the size of sheets. However, the behavior is inconsistent between iPhone and iPad, which affects how the UI is displayed.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Details of the Problem:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On iPhone:
\f1\b0  The 
\f2\fs26 presentationDetents
\f1\fs24  modifier works as expected. It allows us to adjust the sheet height, presenting the sheet in different sizes such as 
\f2\fs26 .medium
\f1\fs24 , 
\f2\fs26 .large
\f1\fs24 , or custom fractions.\
\ls1\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On iPad (in Compact Size Class):
\f1\b0  When the iPad is in split view (or another compact size class situation), the 
\f2\fs26 presentationDetents
\f1\fs24  behave similarly to iPhone, allowing us to present the sheet with adjustable heights.\
\ls1\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On iPad (Regular Size Class - Fullscreen):
\f1\b0  When the iPad is in full-screen mode, SwiftUI presents the sheet as a fullscreen dialog rather than a resizable sheet. This is a default behavior on iPad, and we currently do not have the ability to adjust the height of the sheet in regular size class/fullscreen mode.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Impacts on User Experience:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Inconsistent Presentation:
\f1\b0  On iPhone, the sheet behaves as intended with customizable heights, but on iPad, the user experiences a fullscreen modal, which may not align with the desired design of showing a partial sheet.\
\ls2\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 No Control Over Sheet Height on iPad (Fullscreen Mode):
\f1\b0  We are unable to control or adjust the height of the sheet on iPads in fullscreen mode, leading to a UI experience that does not match the design intent of a resizable sheet.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Next Steps / Design Considerations:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Review of Design on iPad (Regular Size Class):
\f1\b0  We need clarification on how the sheet should behave when it is presented in fullscreen mode on iPad. Should we accept the fullscreen dialog, or is there a preference for maintaining a sheet-like appearance?\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Potential Workarounds:
\f1\b0  As of now, there isn\'92t a straightforward solution in SwiftUI to adjust sheet height in fullscreen on iPads. However, alternative patterns (like using 
\f2\fs26 .popover
\f1\fs24  or a custom modal view) could be considered if the current presentation doesn\'92t align with design expectations.\
}